package com.carrera.consumer.examples;

import java.util.concurrent.TimeUnit;

/**
 * @author yaping
 * @date 2020/4/3
 *
 * 死锁是两个及以上线程在执行过程中，
 * 因争夺资源而造成的一种互相等待的现象
 * 若无外力干涉，他们都将无法推进下去
 */
public class DeadLockDemo {

    public static void main(String[] args) {

        String lockA = "A";
        String lockB = "B";

        new Thread(new HoldLockThread(lockA,lockB),"A").start();
        new Thread(new HoldLockThread(lockB,lockA),"B").start();
    }
}

class HoldLockThread implements Runnable{

    private String lockA;
    private String lockB;

    public HoldLockThread(String lockA, String lockB) {
        this.lockA = lockA;
        this.lockB = lockB;
    }

    @Override
    public void run(){
        synchronized (lockA){
            System.out.println(Thread.currentThread().getName()+"\t get "+lockA+", try to get "+lockB);
            try{ TimeUnit.SECONDS.sleep(10); }catch (Exception e){e.printStackTrace();}
            synchronized (lockB){
                System.out.println(Thread.currentThread().getName()+"\t get "+lockB);
            }
        }
    }
}
