package com.carrera.consumer.examples;

import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.FutureTask;

/**
 * @author yaping
 * @date 2020/4/3
 *
 * Runnable和Callable之间的区别
 * 1. Callable是有返回值的
 * 2. Callable可抛异常
 * 3.
 *    FutureTask<Integer> futureTask = new FutureTask<>(new MyThread2());
 *    Thread thread = new Thread(futureTask);
 *    thread.start();
 *
 *
 */

class MyThread2 implements Callable<Integer>{

    @Override
    public Integer call() throws Exception{
        System.out.println("+++++++++++++MyThread2 call come in +++++++++");
        return Integer.MAX_VALUE;
    }
}


public class CallableDemo{
    public static void main(String[] args) throws ExecutionException, InterruptedException {

        FutureTask<Integer> futureTask = new FutureTask<>(new MyThread2());

        Thread thread1 = new Thread(futureTask,"AA");
        Thread thread2 = new Thread(futureTask,"BB");
        thread1.start();
        thread2.start();//会复用futureTask，只有AA会进入执行，BB不会进入

        while(!futureTask.isDone()){

        }

        int result = futureTask.get(); //要求获得Callable线程的计算结果，如果没有计算完成，就要去强求，会导致堵塞，直到计算完成。

        System.out.println("*******:"+ futureTask.get());

    }
}
