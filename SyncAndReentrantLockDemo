package com.carrera.consumer.examples;

import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

/**
 * @author yaping
 * @date 2020/4/3
 *
 * 题目. synchronized和Lock的区别？用新的lock有什么好处，举例说说
 *
 * 1.原始构成
 *   synchronized是关键字，属于JVM层面。
 *   monitorenter(底层是通过monitor对象来完成，其实wait/notify也是通过monitor对象来完成的,只有在同步块或方法中才能调wait/notify等方法)
 *   monitorexit
 *   Lock是具体类，是API层面的锁
 *
 * 2.使用方法
 *   synchronized不需要用户手动去释放，当synchronized代码执行完后，系统会自动让线程释放对锁的占用
 *   ReentrantLock则需要用户手动去释放锁，若未释放锁，则可能导致死锁。lock/unlock需要配合try/catch/finally使用
 *
 * 3.等待是否可中断
 *   synchronized不可中断，除非抛出异常或者运行结束。
 *   ReentrantLock可中断，1.设置超时方法  tryLock(Long timeout, TimeUnit unit);
 *                       2.lockInterruptibly()放代码块中，调用interrupt()方法可中断。
 *
 * 4.加锁是否公平
 *   synchronized非公平锁
 *   ReentrantLock两者都可以，默认是非公平锁，构造方法可以传入boolean值，true:公平锁， false:非公平锁
 *
 * 5.锁绑定多个条件Condition
 *   synchronized没有
 *   ReentrantLock用来实现分组唤醒需要唤醒的线程们，可以精确唤醒，而不是像synchronized(notify/notifyAll)要么随机唤醒一个线程要么全部唤醒。
 *
 *
 *
 *   ===================================================================================================================
 *   题目：多线程之间按顺序调用，实现A->B->C三个线程启动，要求如下：
 *   AA打印5次， BB打印10次，CC打印15次
 *   紧接着
 *   AA打印5次， BB打印10次，CC打印15次
 *   .
 *   .
 *   .
 *   来10轮
 *   ===================================================================================================================
 */

class ShareData1{
    private static int number = 1;

    public static void print(Lock lock,int seq,int count, Condition current, Condition next){

        lock.lock();
        try {
            //判断
            while(number%3 != seq){
                current.await();
            }
            //干活
            for (int i = 0; i < count; i++) {
                System.out.println(Thread.currentThread().getName()+"\t"+i);
            }
            //通知
            number++;
            next.signal();

        }catch (InterruptedException e){
            e.printStackTrace();
        }finally {
            lock.unlock();
        }

    }

}

public class SyncAndReentrantLockDemo {
    private  static  Lock lock = new ReentrantLock();
    private  static Condition c1 = lock.newCondition();
    private  static Condition c2 = lock.newCondition();
    private  static Condition c3 = lock.newCondition();

    public static void main(String[] args) {

        new Thread(()->{
            for (int i = 0; i < 2; i++) {
                ShareData1.print(lock, 1,5, c1,c2);
            }

        }, "A").start();

        new Thread(()->{
            for (int i = 0; i < 2; i++) {
                ShareData1.print(lock, 2,10, c2,c3);
            }

        }, "B").start();

        new Thread(()->{
            for (int i = 0; i < 2; i++) {
                ShareData1.print(lock,0, 10, c3,c1);
            }
        }, "C").start();


    }
}
